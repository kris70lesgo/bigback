// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model players {
  user_id   String   @id @db.Uuid
  username  String
  points    Int      @default(0)
  // Add more stats as needed (e.g., wins, losses)
  matchmaking matchmaking[]
  matchesAsPlayer1 matches[] @relation("Player1Matches")
  matchesAsPlayer2 matches[] @relation("Player2Matches")
}

model matchmaking {
  id        Int      @id @default(autoincrement())
  user_id   String   @db.Uuid
  joined_at DateTime @default(now())

  players   players  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model matches {
  match_id       Int      @id @default(autoincrement())
  player1        String   @db.Uuid
  player2        String   @db.Uuid
  question       String
  correct_answer String
  p1_answer      String?
  p1_time        Float?
  p2_answer      String?
  p2_time        Float?
  winner         String?
  status         String   @default("pending")

  player1Ref players @relation("Player1Matches", fields: [player1], references: [user_id], onDelete: Cascade)
  player2Ref players @relation("Player2Matches", fields: [player2], references: [user_id], onDelete: Cascade)
}

model questions {
  question_id Int    @id @default(autoincrement())
  text        String
  answer      String
}
